#=====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build the Docker image of OpenWrt
# Instructions: https://github.com/docker/build-push-action
# Build and Push to: https://hub.docker.com/
#=====================================================================================

name: Build the Docker image of OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "lede"
        type: choice
        options:
          - lede
          - official
      docker_img:
        description: "Set the docker image"
        required: false
        default: "ophub/openwrt-aarch64:latest"
        type: choice
        options:
          - ophub/openwrt-aarch64:latest

env:
  TZ: America/New_York
  MAKE_DOCKER_SH: config-openwrt/docker/make_docker_image.sh
  DOCKER_OUTPATH: out

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download OpenWrt rootfs file [ ${{ inputs.source_branch }} ]
        id: down
        if: (!cancelled())
        run: |
          armvirt_tarfile_path="openwrt"
          armvirt_tarfile_name="openwrt-armvirt-64-default-rootfs.tar.gz"
          [[ -d "${armvirt_tarfile_path}" ]] || mkdir -p ${armvirt_tarfile_path}

          latest_version="$(curl -s \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                              https://api.github.com/repos/${GITHUB_REPOSITORY}/releases |
                              jq '.[]' |
                              jq -s --arg RTK "OpenWrt_${{ inputs.source_branch }}_" '.[] | select(.tag_name | contains($RTK))' |
                              jq -s '.[].assets[] | {data:.updated_at, url:.browser_download_url}' |
                              jq -s --arg BOARD "-rootfs.tar.gz" '.[] | select(.url | endswith($BOARD))' |
                              jq -s 'sort_by(.data)|reverse[]' |
                              jq -s '.[0]' -c
                          )"

          [[ "${latest_version}" == "null" ]] && echo "Invalid OpenWrt rootfs download address." && exit 1
          latest_updated_at="$(echo ${latest_version} | jq -r '.data')"
          latest_url="$(echo ${latest_version} | jq -r '.url')"

          wget -q -O "${armvirt_tarfile_path}/${armvirt_tarfile_name}" "${latest_url}"
          [[ "${?}" -ne "0" ]] && echo "Invalid OpenWrt rootfs download address." && exit 1
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Build the Docker image
        id: make
        if: ${{ steps.down.outputs.status }} == 'success' && !cancelled()
        run: |
          chmod +x ${MAKE_DOCKER_SH}
          ${MAKE_DOCKER_SH}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Set up QEMU
        id: qemu
        if: ${{ steps.make.outputs.status }} == 'success' && !cancelled()
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        if: (!cancelled())
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        id: login
        if: (!cancelled())
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to Docker Hub
        id: push
        if: (!cancelled())
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/arm64
          context: ${{ env.DOCKER_OUTPATH }}
          tags: "${{ inputs.docker_img }}"
